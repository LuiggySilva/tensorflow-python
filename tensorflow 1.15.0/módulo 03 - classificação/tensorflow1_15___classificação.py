# -*- coding: utf-8 -*-
"""tensorflow1_15___classificação.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_mM5yL7wEBsF7_8i31ekAxLbvKCBFcu
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression

# Próxima linha necessária apenas no jupyternotebook ou google colab
# %matplotlib inline

base = pd.read_csv('census.csv')
print(f'base["income"].unique() -> {base["income"].unique()}')
print(f'base.shape -> {base.shape}')
print(f'base.columns \n{base.columns}', end='\n'*2)

base.head()

"""> # **Aula 014** - Regressão logística  com Sklearn - **Tensorflow: Classificação**"""

# -- exemplo: prever com base no atributos de uma pessoa qual será seu salário <=50K ou >50K --

pessoa_attrs = base.iloc[:, 0:14].values
classes = base.iloc[:, 14].values

print(f'type(pessoa_attrs) - {type(pessoa_attrs)}')
pessoa_attrs

print(f'type(classes) - {type(classes)}')
classes

pessoa_attrs[0]

# normalizando os dados (transformando strings em números)

label_encoder = LabelEncoder()

pessoa_attrs[:, 1] = label_encoder.fit_transform(pessoa_attrs[:, 1])
pessoa_attrs[:, 3] = label_encoder.fit_transform(pessoa_attrs[:, 3])
pessoa_attrs[:, 5] = label_encoder.fit_transform(pessoa_attrs[:, 5])
pessoa_attrs[:, 6] = label_encoder.fit_transform(pessoa_attrs[:, 6])
pessoa_attrs[:, 7] = label_encoder.fit_transform(pessoa_attrs[:, 7])
pessoa_attrs[:, 8] = label_encoder.fit_transform(pessoa_attrs[:, 8])
pessoa_attrs[:, 9] = label_encoder.fit_transform(pessoa_attrs[:, 9])
pessoa_attrs[:, 13] = label_encoder.fit_transform(pessoa_attrs[:, 13])

pessoa_attrs[0]

# escalonando os dados

scaler_pessoa_attrs = StandardScaler()
pessoa_attrs = scaler_pessoa_attrs.fit_transform(pessoa_attrs)

# divisao de base de treinamento e base de teste

pessoa_attrs_treinamento, pessoa_attrs_teste, classes_treinamento, classes_teste = train_test_split(pessoa_attrs, classes, test_size = 0.3)

# max_iter = quantidade maxima de iterações
classificador = LogisticRegression(max_iter = 10000)
classificador.fit(pessoa_attrs_treinamento, classes_treinamento)

previsoes = classificador.predict(pessoa_attrs_teste)

# comparando as previsoes com os testes
taxa_acerto = accuracy_score(classes_teste, previsoes)
print(f'taxa de acerto - {taxa_acerto}')

"""> # **Aula 015** - Regressão logística com Estimators (Tensorflow) - **Tensorflow: Classificação**"""

# -- exemplo: prever com base no atributos de uma pessoa qual será seu salário <=50K ou >50K --

def converte_classe(rotulo):
  if rotulo == ' >50K':
    return 1
  else:
    return 0
  
# convertendo as classes para números
base['income'] = base['income'].apply(converte_classe)

pessoa_attrs = base.drop('income', axis = 1)
classes = base['income']

print(f'type(pessoa_attrs) - {type(pessoa_attrs)}')
print(f'type(classes) - {type(classes)}')

# Faixa de idade das pessoas
base.age.hist()

idade = tf.feature_column.numeric_column('age')

# Separando a faixa de idades com base no gráfico anterior
idade_categorica = [tf.feature_column.bucketized_column(idade, boundaries = [20,30,40,50,60,70,80,90])]
idade_categorica

pessoa_attrs.columns

pessoa_attrs['native-country'].unique()

pessoa_attrs['education'].unique()

# separando atributos categóricos (tem uma categoria)

nome_colunas_categoricas = ['education', 'marital-status', 'occupation', 'relationship',
                            'race', 'sex', 'native-country']

colunas_categoricas = [tf.feature_column.categorical_column_with_vocabulary_list(key = c, 
                                                                                 vocabulary_list = pessoa_attrs[c].unique()) 
                                                                                 for c in nome_colunas_categoricas]

colunas_categoricas

nome_colunas_numericas = ['final-weight', 'education-num', 'capital-gain', 'capital-loos', 'hour-per-week']

colunas_numericas = [tf.feature_column.numeric_column(key = c) for c in nome_colunas_numericas]
colunas_numericas

colunas = idade_categorica + colunas_categoricas + colunas_numericas
colunas

pessoa_attrs_treinamento, pessoa_attrs_teste, classes_treinamento, classes_teste = train_test_split(pessoa_attrs, classes, test_size = 0.3)

funcao_treinamento = tf.estimator.inputs.pandas_input_fn(x = pessoa_attrs_treinamento, y = classes_treinamento,
                                                         batch_size = 32, num_epochs = None, shuffle = True)

classificador = tf.estimator.LinearClassifier(feature_columns = colunas)

classificador.train(input_fn = funcao_treinamento, steps = 10000)

funcao_previsao = tf.estimator.inputs.pandas_input_fn(x = pessoa_attrs_teste, batch_size = 32, shuffle = False)

previsoes = classificador.predict(input_fn = funcao_previsao)

previsoes_final = []
for p in previsoes:
  previsoes_final.append(p['class_ids'])

taxa_acerto = accuracy_score(classes_teste, previsoes_final)
print(f'taxa de acerto - {taxa_acerto}')