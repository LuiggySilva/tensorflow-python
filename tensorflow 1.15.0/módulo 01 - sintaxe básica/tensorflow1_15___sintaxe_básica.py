# -*- coding: utf-8 -*-
"""tensorflow1.15___sintaxe_básica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-rIPzoNze31SLWNTBuNp5Qgj8YTt0HIR
"""

import tensorflow as tf

"""> # **Aula 001** - Constantes - **Tensorflow: Sintaxe Básica**"""

valor1 = tf.constant(1)
valor2 = tf.constant(2)
print(f'valor1 - {valor1}')
print(f'type(valor1) - {type(valor1)}')

soma = valor1 + valor2 # Apenas define uma fórmula
print(f'soma - {soma}')

# Para ver o cálculo dessa fórmula deve-se criar uma sessão
# with serve para que após todos comandos do bloco forem realizados ele feche a sessão
with tf.Session() as sess: 
  s = sess.run(soma)
  print(f's - {s}', end='\n\n')

texto1 = tf.constant(' texto 1 ')
texto2 = tf.constant(' texto 2 ')
print(f'texto1 - {texto1}')
print(f'type(texto1) - {type(texto1)}')

concatenado = texto1 + texto2

with tf.Session() as sess:
  c = sess.run(concatenado)
  print(f'c - {c}') # b ' texto 1 texto 2 ' o b é de bytes literal

"""> # **Aula 002** - Variáveis 01 - **Tensorflow: Sintaxe Básica**"""

num1 = tf.constant(15, name='num1')
num2 = tf.constant(35, name='num2')
print(f'num1 - {num1}')
print(f'type(num1) - {type(num1)}')

soma = tf.Variable(num1 + num2, name='soma')
print(f'soma - {soma}')
print(f'type(soma) - {type(soma)}')

# Temos que iniciar as váriaveis do tensorflow para poder realizar operações 
init = tf.global_variables_initializer()

with tf.Session() as sess:
  sess.run(init) # Iniciando as váriaveis do tensorflow
  print(f'soma - {sess.run(soma)}')

"""> # **Aula 003** - Variáveis 02 - **Tensorflow: Sintaxe Básica**"""

vetor = tf.constant([5, 10, 15], name='vetor')
print(f'vetor - {vetor}')

soma = tf.Variable(vetor + 5, name='soma')
init1 = tf.global_variables_initializer()

with tf.Session() as sess:
  sess.run(init1)
  print(f'soma - {sess.run(soma)}')

valor = tf.Variable(0, name='valor')
init2 = tf.global_variables_initializer()

with tf.Session() as sess:
  sess.run(init2)
  for i in range(5):
    valor = valor + 1
    print(sess.run(valor))

"""> # **Aula 004** - Adição de vetores e matrizes - **Tensorflow: Sintaxe Básica**"""

vetor1 = tf.constant([9, 8, 7], name='vetor1')
vetor2 = tf.constant([1, 2, 3], name='vetor2')

# As dimensões dos vetores devem ser iguais (quantidade de elementos)
soma1 = vetor1 + vetor2

with tf.Session() as sess:
  print(f'soma1 - {sess.run(soma1)}')

# Com matrizes ...
mat1 = tf.constant([[1, 2, 3], [4, 5, 6]], name='mat1')
mat2 = tf.constant([[1, 2, 3], [4, 5, 6]], name='mat2')
print(f'mat1 - {mat1}')
print(f'mat1.shape - {mat1.shape}', end='\n\n')

soma2 = tf.add(mat1, mat2)

with tf.Session() as sess:
  print('soma2')
  print(sess.run(soma2))

# Mesmo se tiver o número de colunas diferentes, se tiver a mesma quantidade de linhas
# a operação ainda é possivel
mat3 = tf.constant([[1, 3, 5], [2, 4, 6]], name='mat3')
mat4 = tf.constant([[1],[2]], name='mat4')

soma3 = tf.add(mat3, mat4)

with tf.Session() as sess:
  print('\n' + 'soma3')
  print(sess.run(soma3))

"""> # **Aula 005** - Multiplicação de matrizes - **Tensorflow: Sintaxe Básica**"""

mat1 = tf.constant([[1, 2], [3, 4]], name='mat1')
mat2 = tf.constant([[-1, 3],[4, 2]], name='mat2')
mat3 = tf.constant([[1, 2, 3], [4, 5, 6]], name='mat3')

# multi1 = mat1 * mat2 não realiza a multiplicação de matrizes da álgebra linear
mult1 = tf.matmul(mat1, mat2)
mult2 = tf.matmul(mat2, mat1)
mult3= tf.matmul(mat1, mat3)

with tf.Session() as sess:
  print('mult1')
  print(sess.run(mult1))
  print('\n')
  print('mult2')
  print(sess.run(mult2))
  print('\n')
  print('mult3')
  print(sess.run(mult3))

"""> # **Aula 006** - Produto escalar - **Tensorflow: Sintaxe Básica**"""

# -- simulando a estrutura do exemplo 1 --

vetor1 = tf.constant([-1.0, 7.0, 5.0], name='entrada')
vetor2 = tf.constant([0.8, 0.1, 0.0], name='pesos')

multiplicacao = tf.multiply(vetor1, vetor2)

soma = tf.reduce_sum(multiplicacao)

with tf.Session() as sess:
  print('multiplicacao')
  print(sess.run(multiplicacao))
  print('\n')
  print('soma')
  print(sess.run(soma))

"""> # **Aula 007** - Place holders - **Tensorflow: Sintaxe** Básica"""

# primeiro parametro é o tipo de dado que ele vai receber e o segundo a dimenção do dado
ph1 = tf.placeholder('float', None)
# dimenção de matriz com número de linhas variável e com 5 colunas
ph2 = tf.placeholder('float', [None, 5])
ph3 = tf.placeholder('float', 1)

operacao1 = ph1 + 2
operacao2 = ph2 * 5
operacao3 = ph3 - 4

with tf.Session() as sess:
  # feed_dict é um dicionario com os dados para alimentar o placeholder
  resultado1 = sess.run(operacao1, feed_dict={ph1: [1, 2, 3]}) 
  print('resultado1')
  print(resultado1)
  print('\n')
  print('resultado2')
  dados = [[1,2,3,4,5],[1,2,3,4,5]]
  resultado2 = sess.run(operacao2, feed_dict={ph2: dados})
  print(resultado2)
  print('\n')
  print('resultado3')
  resultado3 = sess.run(operacao3, feed_dict={ph3: [8]})
  print(resultado3)

"""> # **Aula 008** - Grafos e visualização com TensorBoard - **Tensorflow: Sintaxe Básica**"""

# Removendo ultimos grafos gerados
tf.reset_default_graph()

num1 = tf.constant(5, name='num1')
num2 = tf.constant(5, name='num2')
num3 = tf.constant(3, name='num3')

with tf.name_scope('Operacoes'):
  with tf.name_scope('Escopo_A'):
    a = tf.add(num1, num2, name = 'add')
  with tf.name_scope('Escopo_B'):
    b = tf.multiply(a, num3, name = 'mult1')
    c = tf.multiply(b, a, name = 'mult2')

with tf.Session() as sess:
  writer = tf.summary.FileWriter('output', sess.graph)
  print(sess.run(c))
  writer.close()

# Para visualizar o grafo basta rodar o comando no terminal -> tensorboard --logdir=PATH
# onde o PATH é o caminho do arquivo gerado na pasta 'output' (events.output...)