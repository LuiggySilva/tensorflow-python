# -*- coding: utf-8 -*-
"""tensorflow2.1.0___validação_de_dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0bq6FR0IY5K-x_z2vnVPKF-ckepS7KT

> # **TensorFlow  2.1.0** - ***06*** - *Validação de dados (TFDV)*
"""

# Commented out IPython magic to ensure Python compatibility.
!pip install -Uq apache_beam==2.17.0
import apache_beam as beam
import apache_beam.io.iobase
!pip install -q tensorflow_data_validation==0.21.2
import tensorflow_data_validation as tfdv

try:
#   %tensorflow_version 2.x
except:
  pass

import tensorflow as tf
import pandas as pd

# analisando dados
# nivel de poluiçao (soot) pela quantidade dos elementos (pm10, no2, so2) no ar
dataset = pd.read_csv('original.csv')
dataset.head()

dataset.shape

training_data = dataset[:1600]
training_data.describe()

test_set = dataset[1600:]
test_set.describe()

# utilzando o tfdv
train_stats = tfdv.generate_statistics_from_dataframe(dataframe= training_data)

train_stats

# criando esquema
schema = tfdv.infer_schema(statistics = train_stats)
tfdv.display_schema(schema)

# estatisticas da base de teste e comparando com esquema da base de treino para encontrar anomalias
test_stats = tfdv.generate_statistics_from_dataframe(dataframe = test_set)
anomalies = tfdv.validate_statistics(statistics = test_stats, schema = schema)
tfdv.display_anomalies(anomalies)

# novos dados com anomalias
test_set_copy = test_set.copy()
test_set_copy.drop("soot", axis = 1, inplace = True)
test_set_copy.describe()

# estatisticas da base com anomalias e comparando com esquema da base de treino
test_set_copy_stats = tfdv.generate_statistics_from_dataframe(dataframe = test_set_copy)
anomalies_new = tfdv.validate_statistics(statistics = test_set_copy_stats, schema = schema)
tfdv.display_anomalies(anomalies_new)

# esquema para produção (serving)
schema.default_environment.append("TRAINING")
schema.default_environment.append("SERVING")

# removendo coluna alvo do esquema para produção
tfdv.get_feature(schema, "soot").not_in_environment.append("SERVING")

# checando anomalias entre o ambiente em produção e a nova base de teste
serving_env_anomalies = tfdv.validate_statistics(test_set_copy_stats, schema, environment = "SERVING")
tfdv.display_anomalies(serving_env_anomalies)

# salvando o esquema
tfdv.write_schema_text(schema = schema, output_path = "pollution_schema.pbtxt")